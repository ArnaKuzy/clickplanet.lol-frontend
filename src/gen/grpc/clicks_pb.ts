// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file clicks.proto (package clicks.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message clicks.v1.MapDensityResponse
 */
export class MapDensityResponse extends Message<MapDensityResponse> {
  /**
   * @generated from field: uint32 density = 1;
   */
  density = 0;

  constructor(data?: PartialMessage<MapDensityResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "clicks.v1.MapDensityResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "density", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MapDensityResponse {
    return new MapDensityResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MapDensityResponse {
    return new MapDensityResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MapDensityResponse {
    return new MapDensityResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MapDensityResponse | PlainMessage<MapDensityResponse> | undefined, b: MapDensityResponse | PlainMessage<MapDensityResponse> | undefined): boolean {
    return proto3.util.equals(MapDensityResponse, a, b);
  }
}

/**
 * @generated from message clicks.v1.ClickRequest
 */
export class ClickRequest extends Message<ClickRequest> {
  /**
   * @generated from field: uint32 tile_id = 1;
   */
  tileId = 0;

  /**
   * @generated from field: string country_id = 2;
   */
  countryId = "";

  constructor(data?: PartialMessage<ClickRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "clicks.v1.ClickRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tile_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "country_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClickRequest {
    return new ClickRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClickRequest {
    return new ClickRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClickRequest {
    return new ClickRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ClickRequest | PlainMessage<ClickRequest> | undefined, b: ClickRequest | PlainMessage<ClickRequest> | undefined): boolean {
    return proto3.util.equals(ClickRequest, a, b);
  }
}

/**
 * @generated from message clicks.v1.Ownerships
 */
export class Ownerships extends Message<Ownerships> {
  /**
   * @generated from field: map<uint32, string> bindings = 1;
   */
  bindings: { [key: number]: string } = {};

  constructor(data?: PartialMessage<Ownerships>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "clicks.v1.Ownerships";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bindings", kind: "map", K: 13 /* ScalarType.UINT32 */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Ownerships {
    return new Ownerships().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Ownerships {
    return new Ownerships().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Ownerships {
    return new Ownerships().fromJsonString(jsonString, options);
  }

  static equals(a: Ownerships | PlainMessage<Ownerships> | undefined, b: Ownerships | PlainMessage<Ownerships> | undefined): boolean {
    return proto3.util.equals(Ownerships, a, b);
  }
}

/**
 * @generated from message clicks.v1.TileUpdate
 */
export class TileUpdate extends Message<TileUpdate> {
  /**
   * @generated from field: uint32 tile_id = 1;
   */
  tileId = 0;

  /**
   * @generated from field: string country_id = 2;
   */
  countryId = "";

  /**
   * @generated from field: string previous_country_id = 3;
   */
  previousCountryId = "";

  constructor(data?: PartialMessage<TileUpdate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "clicks.v1.TileUpdate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tile_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "country_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "previous_country_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TileUpdate {
    return new TileUpdate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TileUpdate {
    return new TileUpdate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TileUpdate {
    return new TileUpdate().fromJsonString(jsonString, options);
  }

  static equals(a: TileUpdate | PlainMessage<TileUpdate> | undefined, b: TileUpdate | PlainMessage<TileUpdate> | undefined): boolean {
    return proto3.util.equals(TileUpdate, a, b);
  }
}

/**
 * @generated from message clicks.v1.OwnershipBatchRequest
 */
export class OwnershipBatchRequest extends Message<OwnershipBatchRequest> {
  /**
   * @generated from field: uint32 start_tile_id = 1;
   */
  startTileId = 0;

  /**
   * @generated from field: uint32 end_tile_id = 2;
   */
  endTileId = 0;

  constructor(data?: PartialMessage<OwnershipBatchRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "clicks.v1.OwnershipBatchRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start_tile_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "end_tile_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OwnershipBatchRequest {
    return new OwnershipBatchRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OwnershipBatchRequest {
    return new OwnershipBatchRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OwnershipBatchRequest {
    return new OwnershipBatchRequest().fromJsonString(jsonString, options);
  }

  static equals(a: OwnershipBatchRequest | PlainMessage<OwnershipBatchRequest> | undefined, b: OwnershipBatchRequest | PlainMessage<OwnershipBatchRequest> | undefined): boolean {
    return proto3.util.equals(OwnershipBatchRequest, a, b);
  }
}

